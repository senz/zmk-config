/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// https://github.com/urob/zmk-config?tab=readme-ov-file#timeless-homerow-mods
// https://github.com/urob/zmk-helpers/blob/main/include/zmk-helpers/key-labels/42.h

#define KEYS_L 5 4 3 2 1 0 17 16 15 14 13 12 29 28 27 26 25 24    // Left-hand keys.
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35  // Right-hand keys.
#define THUMBS 36 37 38 39 40 41                                  // Thumb keys.
#define TTERM_MS 280
#define QTAP_MS 175
#define RPIM_MS 150

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TTERM_MS>;
            quick-tap-ms = <QTAP_MS>;
            require-prior-idle-ms = <RPIM_MS>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TTERM_MS>;
            quick-tap-ms = <QTAP_MS>;
            require-prior-idle-ms = <RPIM_MS>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE             &kp Q  &kp W  &kp E         &kp R        &kp T    &kp Y  &kp U        &kp I            &kp O    &kp P     &kp LBKT
&kp RBKT              &kp A  &kp S  &kp D         &kp F        &kp G    &kp H  &kp J        &kp K            &kp L    &kp SEMI  &kp SQT
&kp LS(LA(LC(LGUI)))  &kp Z  &kp X  &kp C         &kp V        &kp B    &kp N  &kp M        &kp COMMA        &kp DOT  &kp FSLH  &kp BSLH
                                    &lt 2 ESCAPE  &lt 2 SPACE  &none    &none  &lt 1 SPACE  &lt 1 BACKSPACE
            >;
        };

        layer_lower {
            bindings = <
&kp UNDER       &kp F1    &kp F2  &kp F3     &kp F4    &kp F5       &kp F6     &kp F7    &kp F8     &kp F9    &kp F10   &kp F11
&mt LCTRL PLUS  &kp EXCL  &kp AT  &kp HASH   &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR   &kp LPAR  &kp RPAR  &mt RCTRL MINUS
&mt LALT EQUAL  &kp N1    &kp N2  &kp N3     &kp N4    &kp N5       &kp N6     &kp N7    &kp N8     &kp N9    &kp N0    &trans
                                  &lt 3 TAB  &trans    &trans       &trans     &trans    &lt 3 DEL
            >;
        };

        layer_raise {
            bindings = <
&kp KP_NUM       &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS    &kp C_VOL_UP  &kp HOME  &kp PSCRN  &kp PG_UP  &kp SLCK         &kp CAPS
&mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS     &kp C_MUTE    &kp LEFT  &kp UP     &kp RIGHT  &kp INS          &mt RCTRL K_APP
&trans           &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT      &kp C_VOL_DN  &kp END   &kp DOWN   &kp PG_DN  &kp PAUSE_BREAK  &trans
                                             &trans     &trans     &lt 3 RET       &lt 3 ESC     &trans    &trans
            >;
        };

        layer_adjust {
            bindings = <
&bootloader  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&none        &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
                                         &trans        &none         &trans          &trans        &none         &trans
            >;
        };
    };
};
